{
  "api/DotNetHelper.ObjectToSql.Exceptions.EmptyArgumentException.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.EmptyArgumentException.html",
    "title": "Class EmptyArgumentException | DotNetHelper.ObjectToSql",
    "keywords": "Class EmptyArgumentException Custom Exception that lets the user know a code change is required to fix this error Inheritance Object Exception EmptyArgumentException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Exceptions Assembly : DotNetHelper.ObjectToSql.dll Syntax [Serializable] public class EmptyArgumentException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source EmptyArgumentException(SerializationInfo, StreamingContext) Create the exception from serialized data. Usual scenario is when exception is occured somewhere on the remote workstation and we have to re-create/re-throw the exception on the local machine Declaration protected EmptyArgumentException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Serialization context Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Exceptions | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Exceptions Classes EmptyArgumentException Custom Exception that lets the user know a code change is required to fix this error MissingIdentityKeyAttributeException Custom Exception that lets the user know a code change is required to fix this error MissingKeyAttributeException Custom Exception that is thrown when attempted to access properties of object that isn't decorated with either [Key] attribute , or [SqlColumn(SetPrimaryKey=true)] attribute"
  },
  "api/DotNetHelper.ObjectToSql.Services.ObjectToSql.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.ObjectToSql.html",
    "title": "Class ObjectToSql | DotNetHelper.ObjectToSql",
    "keywords": "Class ObjectToSql Inheritance Object ObjectToSql Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Services Assembly : DotNetHelper.ObjectToSql.dll Syntax public class ObjectToSql Constructors | Improve this Doc View Source ObjectToSql(DataBaseType) Declaration public ObjectToSql(DataBaseType type) Parameters Type Name Description DataBaseType type | Improve this Doc View Source ObjectToSql(DataBaseType, Boolean) Declaration public ObjectToSql(DataBaseType type, bool includeNonPublicAccessor) Parameters Type Name Description DataBaseType type Boolean includeNonPublicAccessor Properties | Improve this Doc View Source DatabaseType Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source IncludeNonPublicAccessor Declaration public bool IncludeNonPublicAccessor { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source BuildDbParameterList<T>(T, Func<String, Object, DbParameter>) Builds the SQL parameter list. Declaration public List<DbParameter> BuildDbParameterList<T>(T instance, Func<string, object, DbParameter> getNewParameter) where T : class Parameters Type Name Description T instance Func < String , Object , DbParameter > getNewParameter Returns Type Description List < DbParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildDbParameterList<T>(T, Func<String, Object, DbParameter>, Func<Object, String>, Func<Object, String>, Func<Object, String>) Builds the SQL parameter list. Declaration public List<DbParameter> BuildDbParameterList<T>(T instance, Func<string, object, DbParameter> getNewParameter, Func<object, string> XmlSerializer, Func<object, string> JsonSerializer, Func<object, string> CsvSerializer) where T : class Parameters Type Name Description T instance Func < String , Object , DbParameter > getNewParameter Func < Object , String > XmlSerializer Func < Object , String > JsonSerializer Func < Object , String > CsvSerializer Returns Type Description List < DbParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildQuery(ActionType, Object, String) Declaration public string BuildQuery(ActionType actionType, object instance, string tableName = null) Parameters Type Name Description ActionType actionType Object instance String tableName Returns Type Description String | Improve this Doc View Source BuildQuery<T>(ActionType, String) Declaration public string BuildQuery<T>(ActionType actionType, string tableName = null) where T : class Parameters Type Name Description ActionType actionType String tableName Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildQuery<T>(ActionType, String, Expression<Func<T, Object>>[]) Declaration public string BuildQuery<T>(ActionType actionType, string tableName = null, params Expression<Func<T, object>>[] primaryKeys) where T : class Parameters Type Name Description ActionType actionType String tableName Expression < Func <T, Object >>[] primaryKeys Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildQueryWithOutputs<T>(ActionType, String, Expression<Func<T, Object>>[]) Declaration public string BuildQueryWithOutputs<T>(ActionType actionType, string tableName = null, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description ActionType actionType String tableName Expression < Func <T, Object >>[] outputFields Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildWhereClause(StringBuilder, List<MemberWrapper>) Builds the where clause. Declaration public void BuildWhereClause(StringBuilder sqlBuilder, List<MemberWrapper> keyFields) Parameters Type Name Description StringBuilder sqlBuilder The SQL builder. List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > keyFields The key fields. | Improve this Doc View Source ConvertToDatabaseValue(MemberWrapper, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>) Converts to database value. Declaration public object ConvertToDatabaseValue(MemberWrapper member, object value, Func<object, string> XmlSerializer, Func<object, string> JsonSerializer, Func<object, string> CsvSerializer) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member The member. Object value The value. Func < Object , String > XmlSerializer Func < Object , String > JsonSerializer Func < Object , String > CsvSerializer Returns Type Description Object System.Object. | Improve this Doc View Source ConvertToDatabaseValue(Object) Converts to database value. Declaration public object ConvertToDatabaseValue(object value) Parameters Type Name Description Object value The value. Returns Type Description Object System.Object. | Improve this Doc View Source GetAllNonIgnoreFields(Type, Boolean) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields(Type type, bool includeNonPublicAccessor) Parameters Type Name Description Type type Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetAllNonIgnoreFields<T>(Boolean) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetAllNonIgnoreFields<T>(List<RunTimeAttributeMap>, T) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance) where T : class Parameters Type Name Description List < RunTimeAttributeMap > runTimeAttributes T instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetKeyFields(Boolean, Type) Gets the key fields. Declaration public List<MemberWrapper> GetKeyFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetKeyFields<T>(Boolean) Gets the key fields. Declaration public List<MemberWrapper> GetKeyFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetKeyFields<T>(List<RunTimeAttributeMap>, T) Gets the key fields. Declaration public List<MemberWrapper> GetKeyFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance) where T : class Parameters Type Name Description List < RunTimeAttributeMap > runTimeAttributes T instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonIdentityFields(Boolean, Type) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonIdentityFields(Boolean, Type, Object) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields(bool includeNonPublicAccessor, Type type, object instance) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Object instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonIdentityFields<T>(Boolean) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonIdentityFields<T>(List<RunTimeAttributeMap>, T) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance) where T : class Parameters Type Name Description List < RunTimeAttributeMap > runTimeAttributes T instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonKeyFields(Boolean, Type) Gets the key fields. Declaration public List<MemberWrapper> GetNonKeyFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonKeyFields<T>(Boolean) Gets the non key fields. Declaration public List<MemberWrapper> GetNonKeyFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonKeyFields<T>(List<RunTimeAttributeMap>, T) Gets the non key fields. Declaration public List<MemberWrapper> GetNonKeyFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance) where T : class Parameters Type Name Description List < RunTimeAttributeMap > runTimeAttributes T instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T"
  },
  "api/DotNetHelper.ObjectToSql.Model.RunTimeAttributeMapExtension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.RunTimeAttributeMapExtension.html",
    "title": "Class RunTimeAttributeMapExtension | DotNetHelper.ObjectToSql",
    "keywords": "Class RunTimeAttributeMapExtension Inheritance Object RunTimeAttributeMapExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Model Assembly : DotNetHelper.ObjectToSql.dll Syntax public static class RunTimeAttributeMapExtension Methods | Improve this Doc View Source GetMemberValue(RunTimeAttributeMap, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>) Declaration public static object GetMemberValue(this RunTimeAttributeMap member, object instanceOfObject, Func<object, string> xmlDeserializer, Func<object, string> jsonDeserializer, Func<object, string> csvDeserializer) Parameters Type Name Description RunTimeAttributeMap member Object instanceOfObject Func < Object , String > xmlDeserializer Func < Object , String > jsonDeserializer Func < Object , String > csvDeserializer Returns Type Description Object | Improve this Doc View Source GetNameFromCustomAttributeOrDefault(RunTimeAttributeMap) Declaration public static string GetNameFromCustomAttributeOrDefault(this RunTimeAttributeMap member) Parameters Type Name Description RunTimeAttributeMap member Returns Type Description String | Improve this Doc View Source IsMemberAnIdentityColumn(RunTimeAttributeMap) Declaration public static bool IsMemberAnIdentityColumn(this RunTimeAttributeMap member) Parameters Type Name Description RunTimeAttributeMap member Returns Type Description Boolean | Improve this Doc View Source IsMemberAPrimaryKeyColumn(RunTimeAttributeMap) Declaration public static bool IsMemberAPrimaryKeyColumn(this RunTimeAttributeMap member) Parameters Type Name Description RunTimeAttributeMap member Returns Type Description Boolean | Improve this Doc View Source IsMemberASerializableColumn(RunTimeAttributeMap) Declaration public static bool IsMemberASerializableColumn(this RunTimeAttributeMap member) Parameters Type Name Description RunTimeAttributeMap member Returns Type Description Boolean | Improve this Doc View Source ShouldMemberBeIgnored(RunTimeAttributeMap) Declaration public static bool ShouldMemberBeIgnored(this RunTimeAttributeMap member) Parameters Type Name Description RunTimeAttributeMap member Returns Type Description Boolean"
  },
  "api/DotNetHelper.ObjectToSql.Model.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Model | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Model Classes RunTimeAttributeMap RunTimeAttributeMapExtension SQLTable"
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.MissingKeyAttributeException.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.MissingKeyAttributeException.html",
    "title": "Class MissingKeyAttributeException | DotNetHelper.ObjectToSql",
    "keywords": "Class MissingKeyAttributeException Custom Exception that is thrown when attempted to access properties of object that isn't decorated with either [Key] attribute , or [SqlColumn(SetPrimaryKey=true)] attribute Inheritance Object Exception MissingKeyAttributeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Exceptions Assembly : DotNetHelper.ObjectToSql.dll Syntax [Serializable] public class MissingKeyAttributeException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source MissingKeyAttributeException(SerializationInfo, StreamingContext) Create the exception from serialized data. Usual scenario is when exception is occured somewhere on the remote workstation and we have to re-create/re-throw the exception on the local machine Declaration protected MissingKeyAttributeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Serialization context Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DotNetHelper.ObjectToSql.Model.SQLTable.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.SQLTable.html",
    "title": "Class SQLTable | DotNetHelper.ObjectToSql",
    "keywords": "Class SQLTable Inheritance Object SQLTable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Model Assembly : DotNetHelper.ObjectToSql.dll Syntax public class SQLTable Constructors | Improve this Doc View Source SQLTable(DataBaseType, String) Declaration public SQLTable(DataBaseType dbType, string tableName) Parameters Type Name Description DataBaseType dbType String tableName | Improve this Doc View Source SQLTable(DataBaseType, Type) Declaration public SQLTable(DataBaseType dbType, Type type) Parameters Type Name Description DataBaseType dbType Type type Properties | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; } Property Value Type Description String | Improve this Doc View Source DBType Declaration public DataBaseType DBType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source FullNameWithBrackets Declaration public string FullNameWithBrackets { get; } Property Value Type Description String | Improve this Doc View Source FullNameWithOutBrackets Declaration public string FullNameWithOutBrackets { get; } Property Value Type Description String | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; } Property Value Type Description String | Improve this Doc View Source TableName Declaration public string TableName { get; } Property Value Type Description String"
  },
  "api/DotNetHelper.ObjectToSql.Enum.SQLJoinType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.SQLJoinType.html",
    "title": "Enum SQLJoinType | DotNetHelper.ObjectToSql",
    "keywords": "Enum SQLJoinType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum SQLJoinType Fields Name Description INNER SQL-style INNER JOIN semantics: Only records that produce a match are returned. LEFT SQL-style LEFT OUTER JOIN semantics: All records of the left table are returned. If the right table holds no matching records, the right side's columns contain NULL."
  },
  "api/DotNetHelper.ObjectToSql.Helper.DBTypeMap.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.DBTypeMap.html",
    "title": "Class DBTypeMap | DotNetHelper.ObjectToSql",
    "keywords": "Class DBTypeMap Inheritance Object DBTypeMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Helper Assembly : DotNetHelper.ObjectToSql.dll Syntax public class DBTypeMap Constructors | Improve this Doc View Source DBTypeMap(DataBaseType) Declaration public DBTypeMap(DataBaseType dataBaseType) Parameters Type Name Description DataBaseType dataBaseType Properties | Improve this Doc View Source TypeToSqlTypeMap Declaration public Dictionary<Type, DbType> TypeToSqlTypeMap { get; } Property Value Type Description Dictionary < Type , DbType >"
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.MissingIdentityKeyAttributeException.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.MissingIdentityKeyAttributeException.html",
    "title": "Class MissingIdentityKeyAttributeException | DotNetHelper.ObjectToSql",
    "keywords": "Class MissingIdentityKeyAttributeException Custom Exception that lets the user know a code change is required to fix this error Inheritance Object Exception MissingIdentityKeyAttributeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Exceptions Assembly : DotNetHelper.ObjectToSql.dll Syntax [Serializable] public class MissingIdentityKeyAttributeException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source MissingIdentityKeyAttributeException(SerializationInfo, StreamingContext) Create the exception from serialized data. Usual scenario is when exception is occured somewhere on the remote workstation and we have to re-create/re-throw the exception on the local machine Declaration protected MissingIdentityKeyAttributeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Serialization context Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DotNetHelper.ObjectToSql.Extension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Extension.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Extension | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Extension Classes MemberWrapperExtension"
  },
  "api/DotNetHelper.ObjectToSql.Enum.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Enum | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Enum Enums ActionType DataBaseType ScriptType SerializableType SQLJoinType"
  },
  "api/DotNetHelper.ObjectToSql.Services.DataTableToSql.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.DataTableToSql.html",
    "title": "Class DataTableToSql | DotNetHelper.ObjectToSql",
    "keywords": "Class DataTableToSql Inheritance Object DataTableToSql Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Services Assembly : DotNetHelper.ObjectToSql.dll Syntax public class DataTableToSql Constructors | Improve this Doc View Source DataTableToSql(DataBaseType) Declaration public DataTableToSql(DataBaseType type) Parameters Type Name Description DataBaseType type Properties | Improve this Doc View Source DatabaseType Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DataBaseType Methods | Improve this Doc View Source BuildDbParameterList<T>(DataRow, Func<String, Object, T>) Builds the SQL parameter list. Declaration public List<T> BuildDbParameterList<T>(DataRow row, Func<string, object, T> getNewParameter) where T : DbParameter Parameters Type Name Description DataRow row Func < String , Object , T> getNewParameter Returns Type Description List <T> List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildQuery(DataTable, ActionType) Declaration public string BuildQuery(DataTable dataTable, ActionType actionType) Parameters Type Name Description DataTable dataTable ActionType actionType Returns Type Description String | Improve this Doc View Source BuildQuery(DataTable, ActionType, String) Declaration public string BuildQuery(DataTable dataTable, ActionType actionType, string tableName) Parameters Type Name Description DataTable dataTable ActionType actionType String tableName Returns Type Description String | Improve this Doc View Source BuildQueryFromRowState(DataRow) Declaration public string BuildQueryFromRowState(DataRow dataRow) Parameters Type Name Description DataRow dataRow Returns Type Description String | Improve this Doc View Source BuildQueryFromRowState(DataRow, String) Declaration public string BuildQueryFromRowState(DataRow dataRow, string tableName) Parameters Type Name Description DataRow dataRow String tableName Returns Type Description String | Improve this Doc View Source BuildWhereClause(StringBuilder, List<String>) Builds the where clause. Declaration public void BuildWhereClause(StringBuilder sqlBuilder, List<string> keyFields) Parameters Type Name Description StringBuilder sqlBuilder The SQL builder. List < String > keyFields The key fields."
  },
  "api/DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper.html",
    "title": "Class SqlSyntaxHelper | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlSyntaxHelper Inheritance Object SqlSyntaxHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Helper Assembly : DotNetHelper.ObjectToSql.dll Syntax public class SqlSyntaxHelper Constructors | Improve this Doc View Source SqlSyntaxHelper(DataBaseType) Declaration public SqlSyntaxHelper(DataBaseType type) Parameters Type Name Description DataBaseType type Properties | Improve this Doc View Source DataBaseType Declaration public DataBaseType DataBaseType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source EnclosedValueLookup Declaration public Dictionary<Type, string> EnclosedValueLookup { get; } Property Value Type Description Dictionary < Type , String > Methods | Improve this Doc View Source BuildIfExistStatement(String, String, String) Declaration public string BuildIfExistStatement(string selectStatement, string onTrueSql, string onFalseSql) Parameters Type Name Description String selectStatement String onTrueSql String onFalseSql Returns Type Description String | Improve this Doc View Source BuildTableExistStatement(SQLTable, String, String) Declaration public string BuildTableExistStatement(SQLTable sqlTable, string onTrueSql, string onFalseSql) Parameters Type Name Description SQLTable sqlTable String onTrueSql String onFalseSql Returns Type Description String | Improve this Doc View Source ConvertParameterSqlToReadable<T>(List<T>, String, Encoding) Declaration public string ConvertParameterSqlToReadable<T>(List<T> parameters, string query, Encoding encoding) where T : DbParameter Parameters Type Name Description List <T> parameters String query Encoding encoding Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source GetEnclosedValueChar(Type) Declaration public string GetEnclosedValueChar(Type type) Parameters Type Name Description Type type Returns Type Description String | Improve this Doc View Source GetKeywordEscapeClosedChar() Declaration public string GetKeywordEscapeClosedChar() Returns Type Description String | Improve this Doc View Source GetKeywordEscapeOpenChar() Declaration public string GetKeywordEscapeOpenChar() Returns Type Description String | Improve this Doc View Source RemoveKeywordEscapeChars(String) Declaration public string RemoveKeywordEscapeChars(string value) Parameters Type Name Description String value Returns Type Description String"
  },
  "api/DotNetHelper.ObjectToSql.Extension.MemberWrapperExtension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Extension.MemberWrapperExtension.html",
    "title": "Class MemberWrapperExtension | DotNetHelper.ObjectToSql",
    "keywords": "Class MemberWrapperExtension Inheritance Object MemberWrapperExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Extension Assembly : DotNetHelper.ObjectToSql.dll Syntax public static class MemberWrapperExtension Methods | Improve this Doc View Source GetNameFromCustomAttributeOrDefault(MemberWrapper) Declaration public static string GetNameFromCustomAttributeOrDefault(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description String | Improve this Doc View Source IsMemberAnIdentityColumn(MemberWrapper) Declaration public static bool IsMemberAnIdentityColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source IsMemberAPrimaryKeyColumn(MemberWrapper) Declaration public static bool IsMemberAPrimaryKeyColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source IsMemberASerializableColumn(MemberWrapper) Declaration public static bool IsMemberASerializableColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source ShouldMemberBeIgnored(MemberWrapper) Declaration public static bool ShouldMemberBeIgnored(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean"
  },
  "api/DotNetHelper.ObjectToSql.Attribute.DBTableAttribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.DBTableAttribute.html",
    "title": "Class DBTableAttribute | DotNetHelper.ObjectToSql",
    "keywords": "Class DBTableAttribute This specifies that the following property is also an SQL table Inheritance Object Attribute DBTableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Attribute Assembly : DotNetHelper.ObjectToSql.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public class DBTableAttribute : Attribute, _Attribute Properties | Improve this Doc View Source JoinType Gets or sets a value indicating whether [x reference on delete cascade]. Declaration public SQLJoinType JoinType { get; set; } Property Value Type Description SQLJoinType null if [x reference on delete cascade] contains no value, true if [x reference on delete cascade]; otherwise, false . | Improve this Doc View Source TableName The Sql Table name that this class data belongs to. Declaration public string TableName { get; set; } Property Value Type Description String The map to. | Improve this Doc View Source XReferenceTable Declaration public Type XReferenceTable { get; set; } Property Value Type Description Type Implements System.Runtime.InteropServices._Attribute See Also Attribute"
  },
  "api/DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap.html",
    "title": "Class RunTimeAttributeMap | DotNetHelper.ObjectToSql",
    "keywords": "Class RunTimeAttributeMap Inheritance Object RunTimeAttributeMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Model Assembly : DotNetHelper.ObjectToSql.dll Syntax public class RunTimeAttributeMap Constructors | Improve this Doc View Source RunTimeAttributeMap(String, List<Attribute>) Declaration public RunTimeAttributeMap(string propertyName, List<Attribute> attributes) Parameters Type Name Description String propertyName List < Attribute > attributes Properties | Improve this Doc View Source Attributes Declaration public List<Attribute> Attributes { get; } Property Value Type Description List < Attribute > | Improve this Doc View Source PropertyName Declaration public string PropertyName { get; } Property Value Type Description String Methods | Improve this Doc View Source GetCustomAttribute<T>() Declaration public T GetCustomAttribute<T>() where T : Attribute Returns Type Description T Type Parameters Name Description T Extension Methods RunTimeAttributeMapExtension.GetMemberValue(RunTimeAttributeMap, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>) RunTimeAttributeMapExtension.ShouldMemberBeIgnored(RunTimeAttributeMap) RunTimeAttributeMapExtension.IsMemberASerializableColumn(RunTimeAttributeMap) RunTimeAttributeMapExtension.GetNameFromCustomAttributeOrDefault(RunTimeAttributeMap) RunTimeAttributeMapExtension.IsMemberAnIdentityColumn(RunTimeAttributeMap) RunTimeAttributeMapExtension.IsMemberAPrimaryKeyColumn(RunTimeAttributeMap)"
  },
  "api/DotNetHelper.ObjectToSql.Enum.ScriptType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.ScriptType.html",
    "title": "Enum ScriptType | DotNetHelper.ObjectToSql",
    "keywords": "Enum ScriptType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum ScriptType Fields Name Description HumanReadable Parameterized"
  },
  "api/DotNetHelper.ObjectToSql.Services.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Services | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Services Classes DataTableToSql ObjectToSql"
  },
  "api/DotNetHelper.ObjectToSql.Enum.SerializableType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.SerializableType.html",
    "title": "Enum SerializableType | DotNetHelper.ObjectToSql",
    "keywords": "Enum SerializableType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum SerializableType Fields Name Description CSV JSON NONE XML"
  },
  "api/DotNetHelper.ObjectToSql.Helper.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Helper | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Helper Classes DBTypeMap SqlSyntaxHelper"
  },
  "api/DotNetHelper.ObjectToSql.Enum.DataBaseType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.DataBaseType.html",
    "title": "Enum DataBaseType | DotNetHelper.ObjectToSql",
    "keywords": "Enum DataBaseType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum DataBaseType Fields Name Description Access95 MySql Odbc Oledb Oracle Sqlite SqlServer"
  },
  "api/DotNetHelper.ObjectToSql.Attribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Attribute | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Attribute Classes DBTableAttribute This specifies that the following property is also an SQL table SqlColumnAttribute Class SqlColumnAttribute."
  },
  "api/DotNetHelper.ObjectToSql.Enum.ActionType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.ActionType.html",
    "title": "Enum ActionType | DotNetHelper.ObjectToSql",
    "keywords": "Enum ActionType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum ActionType Fields Name Description Delete Insert Update Upsert"
  },
  "api/DotNetHelper.ObjectToSql.Attribute.SqlColumnAttribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.SqlColumnAttribute.html",
    "title": "Class SqlColumnAttribute | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlColumnAttribute Class SqlColumnAttribute. Inheritance Object Attribute SqlColumnAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Attribute Assembly : DotNetHelper.ObjectToSql.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public class SqlColumnAttribute : Attribute, _Attribute Fields | Improve this Doc View Source MappingIds Gets or sets the mappings for keys to join with. Declaration public string[] MappingIds Field Value Type Description String [] an array of ids, that will join a column to another table. Properties | Improve this Doc View Source Ignore If true property will be use when the class is being used by a DATASOURCE Object Declaration public bool? Ignore { get; set; } Property Value Type Description Nullable < Boolean > null if [ignore] contains no value, true if [ignore]; otherwise, false . | Improve this Doc View Source IsIdentityKey Gets or sets the automatic increment by. If this value is set then the property will be treated as an IDENTITY column Declaration public bool? IsIdentityKey { get; set; } Property Value Type Description Nullable < Boolean > The automatic increment by. | Improve this Doc View Source MapTo If true property will be use when the class is being used by a DATASOURCE Object Declaration public string MapTo { get; set; } Property Value Type Description String The map to. | Improve this Doc View Source MaxColumnSize Defaults To MAX used for creating table Declaration public int? MaxColumnSize { get; set; } Property Value Type Description Nullable < Int32 > The maximum size of the column. | Improve this Doc View Source Nullable Gets or sets a value indicating whether this SqlColumnAttribute is nullable. Declaration public bool? Nullable { get; set; } Property Value Type Description Nullable < Boolean > null if [nullable] contains no value, true if [nullable]; otherwise, false . | Improve this Doc View Source PrimaryKey Gets or sets a value indicating whether [primary key]. Declaration public bool? PrimaryKey { get; set; } Property Value Type Description Nullable < Boolean > null if [primary key] contains no value, true if [primary key]; otherwise, false . | Improve this Doc View Source SerializableType Defaults To MAX used for creating table Declaration public SerializableType SerializableType { get; set; } Property Value Type Description SerializableType The maximum size of the column. | Improve this Doc View Source SetIgnore Gets or sets a value indicating whether [set ignore]. Declaration public bool SetIgnore { get; set; } Property Value Type Description Boolean true if [set ignore]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetIsIdentityKey Gets or sets the set automatic increment by. Declaration public bool SetIsIdentityKey { get; set; } Property Value Type Description Boolean The set automatic increment by. Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetMaxColumnSize Gets or sets the size of the set maximum column. Declaration public int SetMaxColumnSize { get; set; } Property Value Type Description Int32 The size of the set maximum column. Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetNullable Gets or sets a value indicating whether [set nullable]. Declaration public bool SetNullable { get; set; } Property Value Type Description Boolean true if [set nullable]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetPrimaryKey Gets or sets a value indicating whether [set primary key]. Declaration public bool SetPrimaryKey { get; set; } Property Value Type Description Boolean true if [set primary key]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial Implements System.Runtime.InteropServices._Attribute See Also Attribute"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "The 2 ways to generate sql | DotNetHelper.ObjectToSql",
    "keywords": "The 2 ways to generate sql Objects to sql var object2Sql = new ObjectToSql(DataBaseType.SqlServer); DataTable to sql var object2Sql = new DataTableToSql(DataBaseType.SqlServer);"
  },
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "Primary Key & Identity Fields | DotNetHelper.ObjectToSql",
    "keywords": "Primary Key & Identity Fields In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. Decorating Properties As Primary Key // USING SqlColumn Attribute public class Employee { [SqlColumn(SetPrimaryKey = true)] public int PrimaryKey {get; set;} public string FirstName { get; set; } public string LastName { get; set; } } OR // USING DataAnnotation Attribute public class Employee { [Key] public int PrimaryKey {get; set;} public string FirstName { get; set; } public string LastName { get; set; } } using either version of the model above I can now generate update,delete, & upsert statment by doing the following var actionType = ActionType.Update; // A enum with the values Insert,Update,Delete,Upsert var sqlServerObjectToSql = new ObjectToSql(DataBaseType.SqlServer); var updateSql = sqlServerObjectToSql.BuildQuery<Employee>(null,actionType); var upsertSql = sqlServerObjectToSql.BuildQuery<Employee>(\"Employee\",ActionType.Upsert); var deleteSql = sqlServerObjectToSql.BuildQuery<Employee>(\"TableName\",ActionType.Delete); Console.WriteLine(updateSql); Console.WriteLine(upsertSql); Console.WriteLine(deleteSql); running the code above will produces the following sql statments UPDATE Employee SET [FirstName]=@FirstName,[LastName]=@LastName WHERE [PrimaryKey]=@PrimaryKey IF EXISTS ( SELECT TOP 1 * FROM Employee WHERE [PrimaryKey]=@PrimaryKey ) BEGIN UPDATE Employee SET [FirstName]=@FirstName,[LastName]=@LastName WHERE [PrimaryKey]=@PrimaryKey END ELSE BEGIN INSERT INTO Employee ([FirstName],[LastName],[PrimaryKey]) VALUES (@FirstName,@LastName,@PrimaryKey) END DELETE FROM TableName WHERE [PrimaryKey]=@PrimaryKey Warning Executing the a update,upsert, or delete query with an object that doesn't have any key attributes will lead to an InvalidOperationException being thrown. Creating DB Parameters From Object var parameters = sqlServerObjectToSql.BuildDbParameterList(new Employee(), (s, o) => new SqlParameter(s, o),null,null,null); [Tip] The method BuildDBParameterList has an overload that accepts Func<object, string> to allow for columns to be serialize for those senarios where your storing properties as json,csv or xml <!-- ### Supported Attributes this library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework -->"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "Primary Keys | DotNetHelper.ObjectToSql",
    "keywords": "Primary Keys var primaryKeys = new DataTable().PrimaryKey; // THESE ARE YOUR PRIMARY KEYS COLUMNS Identity Fields DataColumn column; if(column.AutoIncrement){ // THEN THIS COLUMN WILL BE TREATED AS A IDENITTY FIELD } Creating SQL var actionType = ActionType.Update; // A enum with the values Insert,Update,Delete,Upsert var dtToSql = new DataTableToSql(DataBaseType.SqlServer); var dt = new DataTable(); // var updateSql = dtToSql.BuildQuery(dt,actionType); var upsertSql = dtToSql.BuildQuery(dt,ActionType.Upsert); var deleteSql = dtToSql.BuildQuery(dt,ActionType.Delete); Warning Executing the a update,upsert, or delete query with a datatable that doesn't have any datacolumn declared as primary key will lead to an InvalidOperationException being thrown. Creating DB Parameters From DataRow var parameters = dtToSql.BuildDbParameterList(new DataTable().Rows[0] (s, o) => new SqlParameter(s, o),null,null,null); [Tip] The method BuildDBParameterList has an overload that accepts Func<object, string> to allow for columns to be serialize for those senarios where your storing properties as json,csv or xml <!-- ### Supported Attributes this library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework -->"
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper.ObjectToSql",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper.ObjectToSql | DotNetHelper.ObjectToSql",
    "keywords": "DotNetHelper.ObjectToSql DotNetHelper.ObjectToSql takes your generic types or dynamic & anonymous objects and convert it to sql. || View on Github || Features INSERT UPDATE DELETE UPSERT INSERT with OUTPUT Columns UPDATE with OUTPUT Columns DELETE with OUTPUT Columns UPSERT with OUTPUT Columns Supported Databases SQLSERVER SQLITE MYSQL More to come How to use How to Use With Generics Types public class Employee { public FirstName { get; set; } public LastName { get; set; } } var sqlServerObjectToSql = new ObjectToSql(DataBaseType.SqlServer); var insertSql = sqlServerObjectToSql.BuildQuery<Employee>(\"TABLE NAME OR DEFAULT TO TYPE NAME\", ActionType.Insert); // OR var insertSql = sqlServerObjectToSql.BuildQuery(\"TABLE NAME OR DEFAULT TO TYPE NAME\", ActionType.Insert,typeof(Employee)); How to Use With Dynamic Objects var sqlServerObjectToSql = new ObjectToSql(DataBaseType.SqlServer); dynamic record = new ExpandoObject(); record.FirstName = \"John\"; record.LastName = \"Doe\"; var insertSql = sqlServerObjectToSql.BuildQuery(\"TABLE NAME OR DEFAULT TO TYPE NAME\", ActionType.Insert,record); How to Use With Anonymous Objects var sqlServerObjectToSql = new ObjectToSql(DataBaseType.SqlServer); var anonymousObject = new { FirstName = \"John\" , LastName = \"Doe\"} var insertSql = sqlServerObjectToSql.BuildQuery(\"TABLE NAME OR DEFAULT TO TYPE NAME\", ActionType.Insert,anonymousObject); Output INSERT INTO TableNameGoHere ([FirstName],[LastName]) VALUES (@FirstName,@LastName) <!-- Links. --> <!-- Documentation Links. -->"
  }
}