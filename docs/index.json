{
  "api/DotNetHelper.ObjectToSql.Attribute.DbTableAttribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.DbTableAttribute.html",
    "title": "Class DbTableAttribute | DotNetHelper.ObjectToSql",
    "keywords": "Class DbTableAttribute This specifies that the following property is also an SQL table Inheritance Object Attribute DbTableAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Attribute Assembly : DotNetHelper.ObjectToSql.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public class DbTableAttribute : Attribute, _Attribute Properties | Improve this Doc View Source JoinType Gets or sets a value indicating whether [x reference on delete cascade]. Declaration public SqlJoinType JoinType { get; set; } Property Value Type Description SqlJoinType null if [x reference on delete cascade] contains no value, true if [x reference on delete cascade]; otherwise, false . | Improve this Doc View Source TableName The Sql Table name that this class data belongs to. Declaration public string TableName { get; set; } Property Value Type Description String The map to. | Improve this Doc View Source XReferenceTable Declaration public Type XReferenceTable { get; set; } Property Value Type Description Type Implements System.Runtime.InteropServices._Attribute See Also Attribute"
  },
  "api/DotNetHelper.ObjectToSql.Attribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Attribute | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Attribute Classes DbTableAttribute This specifies that the following property is also an SQL table SqlColumnAttribute Class SqlColumnAttribute."
  },
  "api/DotNetHelper.ObjectToSql.Attribute.SqlColumnAttribute.html": {
    "href": "api/DotNetHelper.ObjectToSql.Attribute.SqlColumnAttribute.html",
    "title": "Class SqlColumnAttribute | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlColumnAttribute Class SqlColumnAttribute. Inheritance Object Attribute SqlColumnAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Attribute Assembly : DotNetHelper.ObjectToSql.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public class SqlColumnAttribute : Attribute, _Attribute Fields | Improve this Doc View Source MappingIds Gets or sets the mappings for keys to join with. Declaration public string[] MappingIds Field Value Type Description String [] an array of ids, that will join a column to another table. Properties | Improve this Doc View Source Ignore If true property will be use when the class is being used by a DATASOURCE Object Declaration public bool? Ignore { get; set; } Property Value Type Description Nullable < Boolean > null if [ignore] contains no value, true if [ignore]; otherwise, false . | Improve this Doc View Source IsIdentityKey Gets or sets the automatic increment by. If this value is set then the property will be treated as an IDENTITY column Declaration public bool? IsIdentityKey { get; set; } Property Value Type Description Nullable < Boolean > The automatic increment by. | Improve this Doc View Source IsReadOnly If true this property will never be included when creating insert sql. This is meant for senarios where you want to use the database default value Declaration public bool? IsReadOnly { get; set; } Property Value Type Description Nullable < Boolean > The automatic increment by. | Improve this Doc View Source MapTo If true property will be use when the class is being used by a DATASOURCE Object Declaration public string MapTo { get; set; } Property Value Type Description String The map to. | Improve this Doc View Source MaxColumnSize Defaults To MAX used for creating table Declaration public int? MaxColumnSize { get; set; } Property Value Type Description Nullable < Int32 > The maximum size of the column. | Improve this Doc View Source Nullable Gets or sets a value indicating whether this SqlColumnAttribute is nullable. Declaration public bool? Nullable { get; set; } Property Value Type Description Nullable < Boolean > null if [nullable] contains no value, true if [nullable]; otherwise, false . | Improve this Doc View Source PrimaryKey Gets or sets a value indicating whether [primary key]. Declaration public bool? PrimaryKey { get; set; } Property Value Type Description Nullable < Boolean > null if [primary key] contains no value, true if [primary key]; otherwise, false . | Improve this Doc View Source SerializableType Defaults To MAX used for creating table Declaration public SerializableType SerializableType { get; set; } Property Value Type Description SerializableType The maximum size of the column. | Improve this Doc View Source SetIgnore Gets or sets a value indicating whether [set ignore]. Declaration public bool SetIgnore { get; set; } Property Value Type Description Boolean true if [set ignore]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetIsIdentityKey Gets or sets the set automatic increment by. Declaration public bool SetIsIdentityKey { get; set; } Property Value Type Description Boolean The set automatic increment by. Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetIsReadOnly If true this property will never be included when creating insert sql.This is meant for senarios where you want to use the database default value Declaration public bool SetIsReadOnly { get; set; } Property Value Type Description Boolean The set automatic increment by. Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetMaxColumnSize Gets or sets the size of the set maximum column. Declaration public int SetMaxColumnSize { get; set; } Property Value Type Description Int32 The size of the set maximum column. Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetNullable Gets or sets a value indicating whether [set nullable]. Declaration public bool SetNullable { get; set; } Property Value Type Description Boolean true if [set nullable]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial | Improve this Doc View Source SetPrimaryKey Gets or sets a value indicating whether [set primary key]. Declaration public bool SetPrimaryKey { get; set; } Property Value Type Description Boolean true if [set primary key]; otherwise, false . Exceptions Type Condition Exception Nooo... Your Using SqlColumnAttribute wrong do not try to get from the Set Property use the orignial Implements System.Runtime.InteropServices._Attribute See Also Attribute"
  },
  "api/DotNetHelper.ObjectToSql.Enum.ActionType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.ActionType.html",
    "title": "Enum ActionType | DotNetHelper.ObjectToSql",
    "keywords": "Enum ActionType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum ActionType Fields Name Description Delete Insert Update Upsert"
  },
  "api/DotNetHelper.ObjectToSql.Enum.DataBaseType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.DataBaseType.html",
    "title": "Enum DataBaseType | DotNetHelper.ObjectToSql",
    "keywords": "Enum DataBaseType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum DataBaseType Fields Name Description Access95 MySql Odbc Oledb Oracle Sqlite SqlServer"
  },
  "api/DotNetHelper.ObjectToSql.Enum.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Enum | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Enum Enums ActionType DataBaseType OutputType ScriptType SerializableType SqlJoinType"
  },
  "api/DotNetHelper.ObjectToSql.Enum.OutputType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.OutputType.html",
    "title": "Enum OutputType | DotNetHelper.ObjectToSql",
    "keywords": "Enum OutputType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum OutputType Fields Name Description DELETED INSERTED"
  },
  "api/DotNetHelper.ObjectToSql.Enum.ScriptType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.ScriptType.html",
    "title": "Enum ScriptType | DotNetHelper.ObjectToSql",
    "keywords": "Enum ScriptType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum ScriptType Fields Name Description HumanReadable Parameterized"
  },
  "api/DotNetHelper.ObjectToSql.Enum.SerializableType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.SerializableType.html",
    "title": "Enum SerializableType | DotNetHelper.ObjectToSql",
    "keywords": "Enum SerializableType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum SerializableType Fields Name Description Csv Json None Xml"
  },
  "api/DotNetHelper.ObjectToSql.Enum.SqlJoinType.html": {
    "href": "api/DotNetHelper.ObjectToSql.Enum.SqlJoinType.html",
    "title": "Enum SqlJoinType | DotNetHelper.ObjectToSql",
    "keywords": "Enum SqlJoinType Namespace : DotNetHelper.ObjectToSql.Enum Assembly : DotNetHelper.ObjectToSql.dll Syntax public enum SqlJoinType Fields Name Description Inner SQL-style INNER JOIN semantics: Only records that produce a match are returned. Left SQL-style LEFT OUTER JOIN semantics: All records of the left table are returned. If the right table holds no matching records, the right side's columns contain NULL."
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.EmptyArgumentException.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.EmptyArgumentException.html",
    "title": "Class EmptyArgumentException | DotNetHelper.ObjectToSql",
    "keywords": "Class EmptyArgumentException Custom Exception that lets the user know a code change is required to fix this error Inheritance Object Exception EmptyArgumentException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Exceptions Assembly : DotNetHelper.ObjectToSql.dll Syntax [Serializable] public class EmptyArgumentException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source EmptyArgumentException(SerializationInfo, StreamingContext) Create the exception from serialized data. Usual scenario is when exception is occured somewhere on the remote workstation and we have to re-create/re-throw the exception on the local machine Declaration protected EmptyArgumentException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Serialization context Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Exceptions | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Exceptions Classes EmptyArgumentException Custom Exception that lets the user know a code change is required to fix this error MissingKeyAttributeException Custom Exception that is thrown when attempted to access properties of object that isn't decorated with either [Key] attribute , or [SqlColumn(SetPrimaryKey=true)] attribute"
  },
  "api/DotNetHelper.ObjectToSql.Exceptions.MissingKeyAttributeException.html": {
    "href": "api/DotNetHelper.ObjectToSql.Exceptions.MissingKeyAttributeException.html",
    "title": "Class MissingKeyAttributeException | DotNetHelper.ObjectToSql",
    "keywords": "Class MissingKeyAttributeException Custom Exception that is thrown when attempted to access properties of object that isn't decorated with either [Key] attribute , or [SqlColumn(SetPrimaryKey=true)] attribute Inheritance Object Exception MissingKeyAttributeException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Exceptions Assembly : DotNetHelper.ObjectToSql.dll Syntax [Serializable] public class MissingKeyAttributeException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source MissingKeyAttributeException(SerializationInfo, StreamingContext) Create the exception from serialized data. Usual scenario is when exception is occured somewhere on the remote workstation and we have to re-create/re-throw the exception on the local machine Declaration protected MissingKeyAttributeException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Serialization info StreamingContext context Serialization context Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/DotNetHelper.ObjectToSql.Extension.DBConnectionExtension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Extension.DBConnectionExtension.html",
    "title": "Class DBConnectionExtension | DotNetHelper.ObjectToSql",
    "keywords": "Class DBConnectionExtension Inheritance Object DBConnectionExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Extension Assembly : DotNetHelper.ObjectToSql.dll Syntax public static class DBConnectionExtension Methods | Improve this Doc View Source ObjToSql<T>(T, Boolean) Declaration public static ObjectToSql ObjToSql<T>(this T dbConnection, bool includeNonPublicProperties = true) where T : DbConnection Parameters Type Name Description T dbConnection Boolean includeNonPublicProperties Returns Type Description ObjectToSql Type Parameters Name Description T"
  },
  "api/DotNetHelper.ObjectToSql.Extension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Extension.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Extension | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Extension Classes DBConnectionExtension MemberWrapperExtension"
  },
  "api/DotNetHelper.ObjectToSql.Extension.MemberWrapperExtension.html": {
    "href": "api/DotNetHelper.ObjectToSql.Extension.MemberWrapperExtension.html",
    "title": "Class MemberWrapperExtension | DotNetHelper.ObjectToSql",
    "keywords": "Class MemberWrapperExtension Inheritance Object MemberWrapperExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Extension Assembly : DotNetHelper.ObjectToSql.dll Syntax public static class MemberWrapperExtension Methods | Improve this Doc View Source GetNameFromCustomAttributeOrDefault(MemberWrapper) Declaration public static string GetNameFromCustomAttributeOrDefault(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description String | Improve this Doc View Source IsMemberAnIdentityColumn(MemberWrapper) Declaration public static bool IsMemberAnIdentityColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source IsMemberAPrimaryKeyColumn(MemberWrapper) Declaration public static bool IsMemberAPrimaryKeyColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source IsMemberASerializableColumn(MemberWrapper) Declaration public static bool IsMemberASerializableColumn(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source IsMemberIgnoredForInsertSql(MemberWrapper) Declaration public static bool IsMemberIgnoredForInsertSql(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean | Improve this Doc View Source ShouldMemberBeIgnored(MemberWrapper) Declaration public static bool ShouldMemberBeIgnored(this MemberWrapper member) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member Returns Type Description Boolean"
  },
  "api/DotNetHelper.ObjectToSql.Helper.DbTypeMap.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.DbTypeMap.html",
    "title": "Class DbTypeMap | DotNetHelper.ObjectToSql",
    "keywords": "Class DbTypeMap Inheritance Object DbTypeMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Helper Assembly : DotNetHelper.ObjectToSql.dll Syntax public class DbTypeMap Constructors | Improve this Doc View Source DbTypeMap(DataBaseType) Declaration public DbTypeMap(DataBaseType dataBaseType) Parameters Type Name Description DataBaseType dataBaseType Properties | Improve this Doc View Source TypeToSqlTypeMap Declaration public Dictionary<Type, DbType> TypeToSqlTypeMap { get; } Property Value Type Description Dictionary < Type , DbType >"
  },
  "api/DotNetHelper.ObjectToSql.Helper.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Helper | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Helper Classes DbTypeMap SqlSyntaxHelper"
  },
  "api/DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper.html": {
    "href": "api/DotNetHelper.ObjectToSql.Helper.SqlSyntaxHelper.html",
    "title": "Class SqlSyntaxHelper | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlSyntaxHelper Inheritance Object SqlSyntaxHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Helper Assembly : DotNetHelper.ObjectToSql.dll Syntax public class SqlSyntaxHelper Constructors | Improve this Doc View Source SqlSyntaxHelper(DataBaseType) Declaration public SqlSyntaxHelper(DataBaseType type) Parameters Type Name Description DataBaseType type Properties | Improve this Doc View Source ConstAt @ Declaration public char ConstAt { get; } Property Value Type Description Char | Improve this Doc View Source ConstCloseParens ) Declaration public char ConstCloseParens { get; } Property Value Type Description Char | Improve this Doc View Source ConstInsertInto INSERT INTO Declaration public string ConstInsertInto { get; } Property Value Type Description String | Improve this Doc View Source ConstMySqlOnDupeKeyUpdate ON DUPLICATE KEY UPDATE Declaration public string ConstMySqlOnDupeKeyUpdate { get; } Property Value Type Description String | Improve this Doc View Source ConstNull NULL Declaration public string ConstNull { get; } Property Value Type Description String | Improve this Doc View Source ConstOpenParens ( Declaration public char ConstOpenParens { get; } Property Value Type Description Char | Improve this Doc View Source ConstSqlServerSelectTop1 SELECT TOP 1 * FROM Declaration public string ConstSqlServerSelectTop1 { get; } Property Value Type Description String | Improve this Doc View Source ConstValues Declaration public string ConstValues { get; } Property Value Type Description String | Improve this Doc View Source DataBaseType Declaration public DataBaseType DataBaseType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source EnclosedValueLookup Declaration public Dictionary<Type, string> EnclosedValueLookup { get; } Property Value Type Description Dictionary < Type , String > Methods | Improve this Doc View Source BuildIfExistStatement(String, String, String) Declaration public string BuildIfExistStatement(string selectStatement, string onTrueSql, string onFalseSql) Parameters Type Name Description String selectStatement String onTrueSql String onFalseSql Returns Type Description String | Improve this Doc View Source BuildTableExistStatement(SqlTable, String, String) Declaration public string BuildTableExistStatement(SqlTable sqlTable, string onTrueSql, string onFalseSql) Parameters Type Name Description SqlTable sqlTable String onTrueSql String onFalseSql Returns Type Description String | Improve this Doc View Source ConvertParameterSqlToReadable<T>(List<T>, String, Encoding) Converts a A parameterized query to a readable query. Declaration public string ConvertParameterSqlToReadable<T>(List<T> parameters, string query, Encoding encoding) where T : DbParameter Parameters Type Name Description List <T> parameters a list of dbparameters that is included in your parameterized query String query A parameterized query Encoding encoding Only used for properties of the type byte[] Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source EscapeSqlValue(Object, Encoding) return the value escaped for valid sql Declaration public string EscapeSqlValue(object obj, Encoding encoding) Parameters Type Name Description Object obj Encoding encoding Returns Type Description String | Improve this Doc View Source GetEnclosedValueChar(Type) Declaration public string GetEnclosedValueChar(Type type) Parameters Type Name Description Type type Returns Type Description String | Improve this Doc View Source GetKeywordEscapeClosedChar() Declaration public string GetKeywordEscapeClosedChar() Returns Type Description String | Improve this Doc View Source GetKeywordEscapeOpenChar() Declaration public string GetKeywordEscapeOpenChar() Returns Type Description String | Improve this Doc View Source RemoveKeywordEscapeChars(String) Declaration public string RemoveKeywordEscapeChars(string value) Parameters Type Name Description String value Returns Type Description String"
  },
  "api/DotNetHelper.ObjectToSql.html": {
    "href": "api/DotNetHelper.ObjectToSql.html",
    "title": "Namespace DotNetHelper.ObjectToSql | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql Classes SqlGenerator"
  },
  "api/DotNetHelper.ObjectToSql.Model.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Model | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Model Classes SqlTable"
  },
  "api/DotNetHelper.ObjectToSql.Model.SqlTable.html": {
    "href": "api/DotNetHelper.ObjectToSql.Model.SqlTable.html",
    "title": "Class SqlTable | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlTable Inheritance Object SqlTable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Model Assembly : DotNetHelper.ObjectToSql.dll Syntax public class SqlTable Constructors | Improve this Doc View Source SqlTable(DataBaseType, String) Declaration public SqlTable(DataBaseType dbType, string tableName) Parameters Type Name Description DataBaseType dbType String tableName | Improve this Doc View Source SqlTable(DataBaseType, Type) Declaration public SqlTable(DataBaseType dbType, Type type) Parameters Type Name Description DataBaseType dbType Type type Properties | Improve this Doc View Source DatabaseName Declaration public string DatabaseName { get; } Property Value Type Description String | Improve this Doc View Source DbType Declaration public DataBaseType DbType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source FullNameWithBrackets Declaration public string FullNameWithBrackets { get; } Property Value Type Description String | Improve this Doc View Source FullNameWithOutBrackets Declaration public string FullNameWithOutBrackets { get; } Property Value Type Description String | Improve this Doc View Source SchemaName Declaration public string SchemaName { get; } Property Value Type Description String | Improve this Doc View Source TableName Declaration public string TableName { get; } Property Value Type Description String"
  },
  "api/DotNetHelper.ObjectToSql.Services.DataTableToSql.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.DataTableToSql.html",
    "title": "Class DataTableToSql | DotNetHelper.ObjectToSql",
    "keywords": "Class DataTableToSql Inheritance Object DataTableToSql Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Services Assembly : DotNetHelper.ObjectToSql.dll Syntax public class DataTableToSql Constructors | Improve this Doc View Source DataTableToSql(DataBaseType, Boolean) Declaration public DataTableToSql(DataBaseType type, bool alwaysUseParamerizedSql = true) Parameters Type Name Description DataBaseType type Boolean alwaysUseParamerizedSql Properties | Improve this Doc View Source AlwaysCreateParamaterizedSql Declaration public bool AlwaysCreateParamaterizedSql { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DatabaseType Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source SqlSyntaxHelper Declaration public SqlSyntaxHelper SqlSyntaxHelper { get; } Property Value Type Description SqlSyntaxHelper Methods | Improve this Doc View Source BuildDbParameterList<T>(DataRow, Func<String, Object, T>) Builds the SQL parameter list. Declaration public List<T> BuildDbParameterList<T>(DataRow row, Func<string, object, T> getNewParameter) where T : DbParameter Parameters Type Name Description DataRow row Func < String , Object , T> getNewParameter Returns Type Description List <T> List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildQuery(DataTable, ActionType) Declaration public string BuildQuery(DataTable dataTable, ActionType actionType) Parameters Type Name Description DataTable dataTable ActionType actionType Returns Type Description String | Improve this Doc View Source BuildQuery(DataTable, ActionType, String) Declaration public string BuildQuery(DataTable dataTable, ActionType actionType, string tableName) Parameters Type Name Description DataTable dataTable ActionType actionType String tableName Returns Type Description String | Improve this Doc View Source BuildQueryFromRowState(DataRow) Declaration public string BuildQueryFromRowState(DataRow dataRow) Parameters Type Name Description DataRow dataRow Returns Type Description String | Improve this Doc View Source BuildQueryFromRowState(DataRow, String) Declaration public string BuildQueryFromRowState(DataRow dataRow, string tableName) Parameters Type Name Description DataRow dataRow String tableName Returns Type Description String"
  },
  "api/DotNetHelper.ObjectToSql.Services.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.html",
    "title": "Namespace DotNetHelper.ObjectToSql.Services | DotNetHelper.ObjectToSql",
    "keywords": "Namespace DotNetHelper.ObjectToSql.Services Classes DataTableToSql ObjectToSql"
  },
  "api/DotNetHelper.ObjectToSql.Services.ObjectToSql.html": {
    "href": "api/DotNetHelper.ObjectToSql.Services.ObjectToSql.html",
    "title": "Class ObjectToSql | DotNetHelper.ObjectToSql",
    "keywords": "Class ObjectToSql Inheritance Object ObjectToSql Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql.Services Assembly : DotNetHelper.ObjectToSql.dll Syntax public class ObjectToSql Constructors | Improve this Doc View Source ObjectToSql(DataBaseType) Declaration public ObjectToSql(DataBaseType type) Parameters Type Name Description DataBaseType type | Improve this Doc View Source ObjectToSql(DataBaseType, Boolean) Declaration public ObjectToSql(DataBaseType type, bool includeNonPublicAccessor) Parameters Type Name Description DataBaseType type Boolean includeNonPublicAccessor Properties | Improve this Doc View Source AlwaysCreateParamaterizedSql Declaration public bool AlwaysCreateParamaterizedSql { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DatabaseType Declaration public DataBaseType DatabaseType { get; } Property Value Type Description DataBaseType | Improve this Doc View Source IncludeNonPublicAccessor Declaration public bool IncludeNonPublicAccessor { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SqlSyntaxHelper Declaration public SqlSyntaxHelper SqlSyntaxHelper { get; } Property Value Type Description SqlSyntaxHelper Methods | Improve this Doc View Source BuildDbDataParameterList<T>(T, Func<String, Object, IDbDataParameter>) Builds the SQL parameter list. Declaration public List<IDbDataParameter> BuildDbDataParameterList<T>(T instance, Func<string, object, IDbDataParameter> getNewParameter) where T : class Parameters Type Name Description T instance Func < String , Object , IDbDataParameter > getNewParameter Returns Type Description List < IDbDataParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildDbDataParameterList<T>(T, Func<String, Object, IDbDataParameter>, Func<Object, String>, Func<Object, String>, Func<Object, String>) Builds the SQL parameter list. Declaration public List<IDbDataParameter> BuildDbDataParameterList<T>(T instance, Func<string, object, IDbDataParameter> getNewParameter, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) where T : class Parameters Type Name Description T instance Func < String , Object , IDbDataParameter > getNewParameter Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Returns Type Description List < IDbDataParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildDbParameterList<T>(T, Func<String, Object, DbParameter>) Builds the SQL parameter list. Declaration public List<DbParameter> BuildDbParameterList<T>(T instance, Func<string, object, DbParameter> getNewParameter) where T : class Parameters Type Name Description T instance Func < String , Object , DbParameter > getNewParameter Returns Type Description List < DbParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildDbParameterList<T>(T, Func<String, Object, DbParameter>, Func<Object, String>, Func<Object, String>, Func<Object, String>) Builds the SQL parameter list. Declaration public List<DbParameter> BuildDbParameterList<T>(T instance, Func<string, object, DbParameter> getNewParameter, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) where T : class Parameters Type Name Description T instance Func < String , Object , DbParameter > getNewParameter Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Returns Type Description List < DbParameter > List<DbParameter>. Type Parameters Name Description T | Improve this Doc View Source BuildQuery(ActionType, Object, String) Declaration public string BuildQuery(ActionType actionType, object instance, string tableName = null) Parameters Type Name Description ActionType actionType Object instance String tableName Returns Type Description String | Improve this Doc View Source BuildQuery<T>(ActionType, String) Declaration public string BuildQuery<T>(ActionType actionType, string tableName = null) where T : class Parameters Type Name Description ActionType actionType String tableName Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildQuery<T>(ActionType, String, Expression<Func<T, Object>>[]) Declaration public string BuildQuery<T>(ActionType actionType, string tableName = null, params Expression<Func<T, object>>[] primaryKeys) where T : class Parameters Type Name Description ActionType actionType String tableName Expression < Func <T, Object >>[] primaryKeys Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildQueryWithOutputs<T>(ActionType, Expression<Func<T, Object>>[]) Declaration public string BuildQueryWithOutputs<T>(ActionType actionType, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description ActionType actionType Expression < Func <T, Object >>[] outputFields Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source BuildQueryWithOutputs<T>(ActionType, String, Expression<Func<T, Object>>[]) Declaration public string BuildQueryWithOutputs<T>(ActionType actionType, string tableName = null, params Expression<Func<T, object>>[] outputFields) where T : class Parameters Type Name Description ActionType actionType String tableName Expression < Func <T, Object >>[] outputFields Returns Type Description String Type Parameters Name Description T | Improve this Doc View Source ConvertToDatabaseValue(MemberWrapper, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>) Converts to database value. If value is null convert it to DBNull.Value or if property is decorated with a serializable attribute then convert the value to its serialize self Declaration public object ConvertToDatabaseValue(MemberWrapper member, object value, Func<object, string> xmlSerializer, Func<object, string> jsonSerializer, Func<object, string> csvSerializer) Parameters Type Name Description DotNetHelper.FastMember.Extension.Models.MemberWrapper member The member. Object value The value. Func < Object , String > xmlSerializer Func < Object , String > jsonSerializer Func < Object , String > csvSerializer Returns Type Description Object System.Object. | Improve this Doc View Source GetAllNonIgnoreFields(Type, Boolean) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields(Type type, bool includeNonPublicAccessor) Parameters Type Name Description Type type Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetAllNonIgnoreFields<T>(T, Boolean) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields<T>(T instance, bool includeNonPublicAccessor) where T : class Parameters Type Name Description T instance Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetAllNonIgnoreFields<T>(Boolean) Gets all non ignore fields. Declaration public List<MemberWrapper> GetAllNonIgnoreFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetKeyFields(Boolean, Type) Gets the key fields. Declaration public List<MemberWrapper> GetKeyFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetKeyFields<T>(Boolean) Gets the key fields. Declaration public List<MemberWrapper> GetKeyFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonIdentityFields(Boolean, Type) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonIdentityFields(Boolean, Type, Object) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields(bool includeNonPublicAccessor, Type type, object instance) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Object instance Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonIdentityFields<T>(Boolean) Gets the non identity fields. Declaration public List<MemberWrapper> GetNonIdentityFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T | Improve this Doc View Source GetNonKeyFields(Boolean, Type) Gets the non primary key fields. Declaration public List<MemberWrapper> GetNonKeyFields(bool includeNonPublicAccessor, Type type) Parameters Type Name Description Boolean includeNonPublicAccessor Type type Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. | Improve this Doc View Source GetNonKeyFields<T>(Boolean) Gets the non primary key fields. Declaration public List<MemberWrapper> GetNonKeyFields<T>(bool includeNonPublicAccessor) where T : class Parameters Type Name Description Boolean includeNonPublicAccessor Returns Type Description List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > List<MemberWrapper>. Type Parameters Name Description T"
  },
  "api/DotNetHelper.ObjectToSql.SqlGenerator.html": {
    "href": "api/DotNetHelper.ObjectToSql.SqlGenerator.html",
    "title": "Class SqlGenerator | DotNetHelper.ObjectToSql",
    "keywords": "Class SqlGenerator Inheritance Object SqlGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper.ObjectToSql Assembly : DotNetHelper.ObjectToSql.dll Syntax public static class SqlGenerator Methods | Improve this Doc View Source BuildDeleteQuery(SqlSyntaxHelper, String, List<MemberWrapper>, Boolean) Declaration public static string BuildDeleteQuery(SqlSyntaxHelper syntax, string tableName, List<MemberWrapper> keyColumns, bool isReadableSql) Parameters Type Name Description SqlSyntaxHelper syntax String tableName List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > keyColumns Boolean isReadableSql Returns Type Description String | Improve this Doc View Source BuildDeleteQuery(SqlSyntaxHelper, String, List<String>, Boolean) Declaration public static string BuildDeleteQuery(SqlSyntaxHelper syntax, string tableName, List<string> keyColumns, bool isReadableSql) Parameters Type Name Description SqlSyntaxHelper syntax String tableName List < String > keyColumns Boolean isReadableSql Returns Type Description String | Improve this Doc View Source BuildInsertQuery(SqlSyntaxHelper, String, List<String>, List<String>, Boolean) Builds the insert query. Declaration public static string BuildInsertQuery(SqlSyntaxHelper syntax, string tableName, List<string> columns, List<string> valueColumns, bool isReadableSql) Parameters Type Name Description SqlSyntaxHelper syntax String tableName Name of the table. List < String > columns column names List < String > valueColumns values of columns Boolean isReadableSql Returns Type Description String | Improve this Doc View Source BuildWhereClause(SqlSyntaxHelper, List<String>, List<String>, Boolean) Builds the where clause. Example *WHERE A=@A AND B=@b* Declaration public static string BuildWhereClause(SqlSyntaxHelper syntax, List<string> columns, List<string> parameterColumns, bool isReadableSql) Parameters Type Name Description SqlSyntaxHelper syntax List < String > columns List < String > parameterColumns Boolean isReadableSql Returns Type Description String | Improve this Doc View Source BuildWhereClauseFromMembers(SqlSyntaxHelper, List<MemberWrapper>, Boolean) BUilds a where clause from a list of member wrappers Declaration public static string BuildWhereClauseFromMembers(SqlSyntaxHelper syntax, List<MemberWrapper> members, bool isReadableSql) Parameters Type Name Description SqlSyntaxHelper syntax List < DotNetHelper.FastMember.Extension.Models.MemberWrapper > members Boolean isReadableSql Returns Type Description String"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper.ObjectToSql | DotNetHelper.ObjectToSql",
    "keywords": "DotNetHelper.ObjectToSql DotNetHelper.ObjectToSql takes your generic types or dynamic & anonymous objects and convert it to sql. || View on Github || Features Generating the following sqls from objects & datatables INSERT UPDATE DELETE UPSERT Supports SQLServer OUTPUT CLAUSE Using Expressions Create DBParameters from any type of objects Supported Databases SQLSERVER SQLITE MYSQL More to come How to Generate SQL How to Use With Generics Types public class Employee { public FirstName { get; set; } public LastName { get; set; } } var insertSql = new ObjectToSql(DataBaseType.SqlServer).BuildQuery<Employee>(ActionType.Insert); // OR USING EMPLOYEE OBJECT var insertSql = new ObjectToSql(DataBaseType.SqlServer).BuildQuery(ActionType.Insert,new Employee()); How to Use With Dynamic Objects dynamic record = new ExpandoObject(); record.FirstName = \"John\"; record.LastName = \"Doe\"; var insertSql = new ObjectToSql(DataBaseType.SqlServer).BuildQuery(ActionType.Insert, record, \"Employee\"); How to Use With Anonymous Objects var obj = new {FirstName = \"John\", LastName = \"Doe\"}; var insertSql = new ObjectToSql(DataBaseType.SqlServer).BuildQuery(ActionType.Insert, obj, \"Employee\"); How to Generate SQL From DataTables var insertSql = new DataTableToSql(DataBaseType.SqlServer).BuildQuery(dataTable, ActionType.Insert); Output INSERT INTO Employee ([FirstName],[LastName]) VALUES (@FirstName,@LastName) How to Generate DBParameters var obj2Sql = new ObjectToSql(DataBaseType.SqlServer); var dbParameters = obj2Sql.BuildDbParameterList(new Employee(), (s, o) => new SqlParameter(s, o)); <!-- Links. --> <!-- Documentation Links. -->"
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper.ObjectToSql",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // using data annotation Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [Key] // using data annotation Mark a property as a Json, Xml, Or Csv Field. [SqlColumn(SerializableType = SerializableType.Json)] Mark a property to be ignored . [SqlColumn(Ignore = true)] OR [NotMapped] // using data annotation <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "Primary Keys | DotNetHelper.ObjectToSql",
    "keywords": "Primary Keys var primaryKeys = new DataTable().PrimaryKey; // THESE ARE YOUR PRIMARY KEYS COLUMNS Identity Fields DataColumn column; if(column.AutoIncrement){ // THEN THIS COLUMN WILL BE TREATED AS A IDENITTY FIELD } Creating SQL var actionType = ActionType.Update; // A enum with the values Insert,Update,Delete,Upsert var dtToSql = new DataTableToSql(DataBaseType.SqlServer); var dt = new DataTable(); // var updateSql = dtToSql.BuildQuery(dt,actionType); var upsertSql = dtToSql.BuildQuery(dt,ActionType.Upsert); var deleteSql = dtToSql.BuildQuery(dt,ActionType.Delete); Warning Executing the a update,upsert, or delete query with a datatable that doesn't have any datacolumn declared as primary key will lead to an InvalidOperationException being thrown. Creating DB Parameters From DataRow var parameters = dtToSql.BuildDbParameterList(new DataTable().Rows[0] (s, o) => new SqlParameter(s, o)); [Tip] The method BuildDBParameterList has an overload that accepts Func<object, string> to allow for columns to be serialize for those senarios where your storing properties as json,csv or xml <!-- ### Supported Attributes this library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework -->"
  },
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "Primary Key & Identity Fields | DotNetHelper.ObjectToSql",
    "keywords": "Primary Key & Identity Fields In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. Decorating Properties As Primary Key // USING SqlColumn Attribute public class Employee { [SqlColumn(SetPrimaryKey = true)] public int PrimaryKey {get; set;} public string FirstName { get; set; } public string LastName { get; set; } } OR // USING DataAnnotation Attribute public class Employee { [Key] public int PrimaryKey {get; set;} public string FirstName { get; set; } public string LastName { get; set; } } using either version of the model above I can now generate update,delete, & upsert statment by doing the following var actionType = ActionType.Update; // A enum with the values Insert,Update,Delete,Upsert var sqlServerObjectToSql = new ObjectToSql(DataBaseType.SqlServer); var updateSql = sqlServerObjectToSql.BuildQuery<Employee>(actionType); var upsertSql = sqlServerObjectToSql.BuildQuery<Employee>(ActionType.Upsert,\"Employee\"); var deleteSql = sqlServerObjectToSql.BuildQuery<Employee>(ActionType.Delete,\"TableName\"); Console.WriteLine(updateSql); Console.WriteLine(upsertSql); Console.WriteLine(deleteSql); running the code above will produces the following sql statments UPDATE Employee SET [FirstName]=@FirstName,[LastName]=@LastName WHERE [PrimaryKey]=@PrimaryKey IF EXISTS ( SELECT TOP 1 * FROM Employee WHERE [PrimaryKey]=@PrimaryKey ) BEGIN UPDATE Employee SET [FirstName]=@FirstName,[LastName]=@LastName WHERE [PrimaryKey]=@PrimaryKey END ELSE BEGIN INSERT INTO Employee ([FirstName],[LastName],[PrimaryKey]) VALUES (@FirstName,@LastName,@PrimaryKey) END DELETE FROM TableName WHERE [PrimaryKey]=@PrimaryKey Warning Executing the a update,upsert, or delete query with an object that doesn't have any key attributes will lead to an InvalidOperationException being thrown. Creating DB Parameters From Object var parameters = sqlServerObjectToSql.BuildDbParameterList(new Employee(), (s, o) => new SqlParameter(s, o)); [Tip] The method BuildDBParameterList has an overload that accepts Func<object, string> to allow for columns to be serialize for those senarios where your storing properties as json,csv or xml <!-- ### Supported Attributes this library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework -->"
  },
  "tutorials/GenerateSql/readablesql.html": {
    "href": "tutorials/GenerateSql/readablesql.html",
    "title": "Creating Readable Sql | DotNetHelper.ObjectToSql",
    "keywords": "Creating Readable Sql By default all sql is generated as parameterized query as they should be but there may be times where you want to create non-parameterized queries. This article will show you how to do that Create Readable Sql Using ObjectToSql Class public class Employee { public string FirstName { get; set; } public string LastName { get; set; } } var obj2Sql = new Services.ObjectToSql(DataBaseType.SqlServer); // create an object you want to convert to sql var employee = new Employee(); // create dbparameters from my object var dbParameters = obj2Sql.BuildDbParameterList(employee, (s, o) => new SqlParameter(s, o)); // create my parameterized sql based on my specified action type var insertSql = obj2Sql.BuildQuery<Employee>(ActionType.Insert); // convert my parameterize sql to be readable var readAbleSql = obj2Sql.SqlSyntaxHelper.ConvertParameterSqlToReadable(dbParameters, insertSql, Encoding.UTF8); // unit test Assert.AreEqual(readAbleSql, \"INSERT INTO Employee ([FirstName],[LastName]) VALUES (NULL,NULL)\"); Create Readable Sql Using DataTableToSql Class // create an datatable you want to convert to sql var dt = new DataTable(\"Employee\"); dt.Columns.Add(\"IdentityKey\", typeof(int)); dt.Columns[\"IdentityKey\"].AutoIncrement = true; dt.PrimaryKey = new[] { dt.Columns[\"IdentityKey\"] }; dt.Columns.Add(\"FirstName\", typeof(string)); dt.Columns.Add(\"LastName\", typeof(string)); dt.Rows.Add(1, \"John\", \"Doe\"); var dt2Sql = new Services.DataTableToSql(DataBaseType.SqlServer); // create dbparameters from my datarow var dbParameters = dt2Sql.BuildDbParameterList(dt.Rows[0], (s, o) => new SqlParameter(s, o)); // create my parameterized sql based on my specified action type var insertSql = dt2Sql.BuildQuery(dt, ActionType.Insert); // convert my parameterize sql to be readable var readAbleSql = dt2Sql.SqlSyntaxHelper.ConvertParameterSqlToReadable(dbParameters, insertSql, Encoding.UTF8); // unit test Assert.AreEqual(readAbleSql, \"INSERT INTO Employee ([FirstName],[LastName]) VALUES ('John','Doe')\");"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "The 3 ways to generate sql | DotNetHelper.ObjectToSql",
    "keywords": "The 3 ways to generate sql Objects to sql public class Employee { public FirstName { get; set; } public LastName { get; set; } } var object2Sql = new ObjectToSql(DataBaseType.SqlServer); // CREATE A INSERT,UPDATE,UPSERT,& DELETE SQL STATEMENT var insertSQL = object2Sql.BuildQuery(ActionType.Insert,new Employee()); var updateSQL = object2Sql.BuildQuery(ActionType.Update,new Employee()); var upsertSQL = object2Sql.BuildQuery(ActionType.Upsert,new Employee()); var deleteSQL = object2Sql.BuildQuery(ActionType.Delete,new Employee()); DataTable to sql var dataTable2Sql = new DataTableToSql(DataBaseType.SqlServer); // CREATE A INSERT,UPDATE,UPSERT,& DELETE SQL STATEMENT var insertSQL = dataTable2Sql.BuildQuery(dataTable, ActionType.Insert); var updateSQL = dataTable2Sql.BuildQuery(dataTable, ActionType.Update); var upsertSQL = dataTable2Sql.BuildQuery(dataTable, ActionType.Upsert); var deleteSQL = dataTable2Sql.BuildQuery(dataTable, ActionType.Delete); Class to sql public class Employee { public FirstName { get; set; } public LastName { get; set; } } var class2Sql = new ObjectToSql(DataBaseType.SqlServer); // CREATE A INSERT,UPDATE,UPSERT,& DELETE SQL STATEMENT var insertSQL = class2Sql.BuildQuery<Employee>(ActionType.Insert); var updateSQL = class2Sql.BuildQuery<Employee>(ActionType.Update); var upsertSQL = class2Sql.BuildQuery<Employee>(ActionType.Upsert); var deleteSQL = class2Sql.BuildQuery<Employee>(ActionType.Delete);"
  }
}