### YamlMime:ManagedReference
items:
- uid: DotNetHelper.ObjectToSql.ObjectToSql
  commentId: T:DotNetHelper.ObjectToSql.ObjectToSql
  id: ObjectToSql
  parent: DotNetHelper.ObjectToSql
  children:
  - DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  - DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList``1(``0,System.Func{System.String,System.Object,System.Data.Common.DbParameter},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Object)
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType)
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,``0,System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap})
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  - DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause(System.Text.StringBuilder,System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper})
  - DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper,System.Object,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  - DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(System.Object)
  - DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
  - DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(System.Type,System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(System.Boolean,System.Type)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(System.Boolean,System.Type)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(System.Boolean,System.Type)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Boolean)
  - DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  - DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
  langs:
  - csharp
  - vb
  name: ObjectToSql
  nameWithType: ObjectToSql
  fullName: DotNetHelper.ObjectToSql.ObjectToSql
  type: Class
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: ObjectToSql
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 18
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public class ObjectToSql
    content.vb: Public Class ObjectToSql
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
  commentId: P:DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
  id: IncludeNonPublicAccessor
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: IncludeNonPublicAccessor
  nameWithType: ObjectToSql.IncludeNonPublicAccessor
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
  type: Property
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: IncludeNonPublicAccessor
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 21
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public bool IncludeNonPublicAccessor { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IncludeNonPublicAccessor As Boolean
  overload: DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
  commentId: P:DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
  id: DatabaseType
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: ObjectToSql.DatabaseType
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
  type: Property
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: DatabaseType
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 22
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public DataBaseType DatabaseType { get; }
    parameters: []
    return:
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public ReadOnly Property DatabaseType As DataBaseType
  overload: DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.Boolean)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType,System.Boolean)'
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: ObjectToSql(DataBaseType, Boolean)
  nameWithType: ObjectToSql.ObjectToSql(DataBaseType, Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ObjectToSql(DotNetHelper.ObjectToSql.Enum.DataBaseType, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: .ctor
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 24
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public ObjectToSql(DataBaseType type, bool includeNonPublicAccessor)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    - id: includeNonPublicAccessor
      type: System.Boolean
    content.vb: Public Sub New(type As DataBaseType, includeNonPublicAccessor As Boolean)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  id: '#ctor(DotNetHelper.ObjectToSql.Enum.DataBaseType)'
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: ObjectToSql(DataBaseType)
  nameWithType: ObjectToSql.ObjectToSql(DataBaseType)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ObjectToSql(DotNetHelper.ObjectToSql.Enum.DataBaseType)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: .ctor
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 29
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public ObjectToSql(DataBaseType type)
    parameters:
    - id: type
      type: DotNetHelper.ObjectToSql.Enum.DataBaseType
    content.vb: Public Sub New(type As DataBaseType)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType)
  id: BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildQuery<T>(String, ActionType)
  nameWithType: ObjectToSql.BuildQuery<T>(String, ActionType)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery<T>(System.String, DotNetHelper.ObjectToSql.Enum.ActionType)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildQuery
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 60
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: >-
      public string BuildQuery<T>(string tableName, ActionType actionType)
          where T : class
    parameters:
    - id: tableName
      type: System.String
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Function BuildQuery(Of T As Class)(tableName As String, actionType As ActionType) As String
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery*
  nameWithType.vb: ObjectToSql.BuildQuery(Of T)(String, ActionType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(Of T)(System.String, DotNetHelper.ObjectToSql.Enum.ActionType)
  name.vb: BuildQuery(Of T)(String, ActionType)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildQuery<T>(String, ActionType, Expression<Func<T, Object>>[])
  nameWithType: ObjectToSql.BuildQuery<T>(String, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery<T>(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildQuery
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 97
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: >-
      public string BuildQuery<T>(string tableName, ActionType actionType, params Expression<Func<T, object>>[] primaryKeys)
          where T : class
    parameters:
    - id: tableName
      type: System.String
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: primaryKeys
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Function BuildQuery(Of T As Class)(tableName As String, actionType As ActionType, ParamArray primaryKeys As Expression(Of Func(Of T, Object))()) As String
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery*
  nameWithType.vb: ObjectToSql.BuildQuery(Of T)(String, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(Of T)(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: BuildQuery(Of T)(String, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Object)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Object)
  id: BuildQuery(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Object)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildQuery(String, ActionType, Object)
  nameWithType: ObjectToSql.BuildQuery(String, ActionType, Object)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildQuery
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 133
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: public string BuildQuery(string tableName, ActionType actionType, object instance)
    parameters:
    - id: tableName
      type: System.String
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: instance
      type: System.Object
    return:
      type: System.String
    content.vb: Public Function BuildQuery(tableName As String, actionType As ActionType, instance As Object) As String
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,``0,System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap})
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,``0,System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap})
  id: BuildQuery``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,``0,System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap})
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildQuery<T>(String, ActionType, T, List<RunTimeAttributeMap>)
  nameWithType: ObjectToSql.BuildQuery<T>(String, ActionType, T, List<RunTimeAttributeMap>)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery<T>(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, T, System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildQuery
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 171
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  syntax:
    content: >-
      public string BuildQuery<T>(string tableName, ActionType actionType, T instance, List<RunTimeAttributeMap> runTimeAttributes)
          where T : class
    parameters:
    - id: tableName
      type: System.String
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
    - id: instance
      type: '{T}'
    - id: runTimeAttributes
      type: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Function BuildQuery(Of T As Class)(tableName As String, actionType As ActionType, instance As T, runTimeAttributes As List(Of RunTimeAttributeMap)) As String
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery*
  nameWithType.vb: ObjectToSql.BuildQuery(Of T)(String, ActionType, T, List(Of RunTimeAttributeMap))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery(Of T)(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, T, System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap))
  name.vb: BuildQuery(Of T)(String, ActionType, T, List(Of RunTimeAttributeMap))
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  id: BuildQueryWithOutputs``1(System.String,DotNetHelper.ObjectToSql.Enum.ActionType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildQueryWithOutputs<T>(String, ActionType, Expression<Func<T, Object>>[])
  nameWithType: ObjectToSql.BuildQueryWithOutputs<T>(String, ActionType, Expression<Func<T, Object>>[])
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs<T>(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildQueryWithOutputs
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 202
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\n"
  example: []
  syntax:
    content: >-
      public string BuildQueryWithOutputs<T>(string tableName, ActionType actionType, params Expression<Func<T, object>>[] outputFields)
          where T : class
    parameters:
    - id: tableName
      type: System.String
      description: ''
    - id: actionType
      type: DotNetHelper.ObjectToSql.Enum.ActionType
      description: ''
    - id: outputFields
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function BuildQueryWithOutputs(Of T As Class)(tableName As String, actionType As ActionType, ParamArray outputFields As Expression(Of Func(Of T, Object))()) As String
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs*
  nameWithType.vb: ObjectToSql.BuildQueryWithOutputs(Of T)(String, ActionType, Expression(Of Func(Of T, Object))())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs(Of T)(System.String, DotNetHelper.ObjectToSql.Enum.ActionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: BuildQueryWithOutputs(Of T)(String, ActionType, Expression(Of Func(Of T, Object))())
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Boolean)
  id: GetNonKeyFields``1(System.Boolean)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonKeyFields<T>(Boolean)
  nameWithType: ObjectToSql.GetNonKeyFields<T>(Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 773
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the non key fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetNonKeyFields<T>(bool includeNonPublicAccessor)
          where T : class
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonKeyFields(Of T As Class)(includeNonPublicAccessor As Boolean) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields*
  nameWithType.vb: ObjectToSql.GetNonKeyFields(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(Of T)(System.Boolean)
  name.vb: GetNonKeyFields(Of T)(Boolean)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  id: GetNonKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonKeyFields<T>(List<RunTimeAttributeMap>, T)
  nameWithType: ObjectToSql.GetNonKeyFields<T>(List<RunTimeAttributeMap>, T)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields<T>(System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>, T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 783
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the non key fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetNonKeyFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance)
          where T : class
    parameters:
    - id: runTimeAttributes
      type: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
    - id: instance
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonKeyFields(Of T As Class)(runTimeAttributes As List(Of RunTimeAttributeMap), instance As T) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields*
  nameWithType.vb: ObjectToSql.GetNonKeyFields(Of T)(List(Of RunTimeAttributeMap), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(Of T)(System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap), T)
  name.vb: GetNonKeyFields(Of T)(List(Of RunTimeAttributeMap), T)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(System.Boolean,System.Type)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(System.Boolean,System.Type)
  id: GetNonKeyFields(System.Boolean,System.Type)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonKeyFields(Boolean, Type)
  nameWithType: ObjectToSql.GetNonKeyFields(Boolean, Type)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields(System.Boolean, System.Type)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 798
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the key fields.\n"
  example: []
  syntax:
    content: public List<MemberWrapper> GetNonKeyFields(bool includeNonPublicAccessor, Type type)
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonKeyFields(includeNonPublicAccessor As Boolean, type As Type) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Boolean)
  id: GetKeyFields``1(System.Boolean)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetKeyFields<T>(Boolean)
  nameWithType: ObjectToSql.GetKeyFields<T>(Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 813
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the key fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetKeyFields<T>(bool includeNonPublicAccessor)
          where T : class
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetKeyFields(Of T As Class)(includeNonPublicAccessor As Boolean) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields*
  nameWithType.vb: ObjectToSql.GetKeyFields(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(Of T)(System.Boolean)
  name.vb: GetKeyFields(Of T)(Boolean)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  id: GetKeyFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetKeyFields<T>(List<RunTimeAttributeMap>, T)
  nameWithType: ObjectToSql.GetKeyFields<T>(List<RunTimeAttributeMap>, T)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields<T>(System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>, T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 824
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the key fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetKeyFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance)
          where T : class
    parameters:
    - id: runTimeAttributes
      type: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
    - id: instance
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetKeyFields(Of T As Class)(runTimeAttributes As List(Of RunTimeAttributeMap), instance As T) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields*
  nameWithType.vb: ObjectToSql.GetKeyFields(Of T)(List(Of RunTimeAttributeMap), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(Of T)(System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap), T)
  name.vb: GetKeyFields(Of T)(List(Of RunTimeAttributeMap), T)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(System.Boolean,System.Type)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(System.Boolean,System.Type)
  id: GetKeyFields(System.Boolean,System.Type)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetKeyFields(Boolean, Type)
  nameWithType: ObjectToSql.GetKeyFields(Boolean, Type)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields(System.Boolean, System.Type)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetKeyFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 839
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the key fields.\n"
  example: []
  syntax:
    content: public List<MemberWrapper> GetKeyFields(bool includeNonPublicAccessor, Type type)
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetKeyFields(includeNonPublicAccessor As Boolean, type As Type) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Boolean)
  id: GetNonIdentityFields``1(System.Boolean)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonIdentityFields<T>(Boolean)
  nameWithType: ObjectToSql.GetNonIdentityFields<T>(Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonIdentityFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 853
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the non identity fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetNonIdentityFields<T>(bool includeNonPublicAccessor)
          where T : class
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonIdentityFields(Of T As Class)(includeNonPublicAccessor As Boolean) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields*
  nameWithType.vb: ObjectToSql.GetNonIdentityFields(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(Of T)(System.Boolean)
  name.vb: GetNonIdentityFields(Of T)(Boolean)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  id: GetNonIdentityFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonIdentityFields<T>(List<RunTimeAttributeMap>, T)
  nameWithType: ObjectToSql.GetNonIdentityFields<T>(List<RunTimeAttributeMap>, T)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields<T>(System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>, T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonIdentityFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 863
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the non identity fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetNonIdentityFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance)
          where T : class
    parameters:
    - id: runTimeAttributes
      type: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
    - id: instance
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonIdentityFields(Of T As Class)(runTimeAttributes As List(Of RunTimeAttributeMap), instance As T) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields*
  nameWithType.vb: ObjectToSql.GetNonIdentityFields(Of T)(List(Of RunTimeAttributeMap), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(Of T)(System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap), T)
  name.vb: GetNonIdentityFields(Of T)(List(Of RunTimeAttributeMap), T)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(System.Boolean,System.Type)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(System.Boolean,System.Type)
  id: GetNonIdentityFields(System.Boolean,System.Type)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetNonIdentityFields(Boolean, Type)
  nameWithType: ObjectToSql.GetNonIdentityFields(Boolean, Type)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields(System.Boolean, System.Type)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetNonIdentityFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 878
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets the non identity fields.\n"
  example: []
  syntax:
    content: public List<MemberWrapper> GetNonIdentityFields(bool includeNonPublicAccessor, Type type)
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetNonIdentityFields(includeNonPublicAccessor As Boolean, type As Type) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Boolean)
  id: GetAllNonIgnoreFields``1(System.Boolean)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetAllNonIgnoreFields<T>(Boolean)
  nameWithType: ObjectToSql.GetAllNonIgnoreFields<T>(Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetAllNonIgnoreFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 892
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets all non ignore fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetAllNonIgnoreFields<T>(bool includeNonPublicAccessor)
          where T : class
    parameters:
    - id: includeNonPublicAccessor
      type: System.Boolean
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetAllNonIgnoreFields(Of T As Class)(includeNonPublicAccessor As Boolean) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields*
  nameWithType.vb: ObjectToSql.GetAllNonIgnoreFields(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(Of T)(System.Boolean)
  name.vb: GetAllNonIgnoreFields(Of T)(Boolean)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  id: GetAllNonIgnoreFields``1(System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap},``0)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetAllNonIgnoreFields<T>(List<RunTimeAttributeMap>, T)
  nameWithType: ObjectToSql.GetAllNonIgnoreFields<T>(List<RunTimeAttributeMap>, T)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields<T>(System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>, T)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetAllNonIgnoreFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 903
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets all non ignore fields.\n"
  example: []
  syntax:
    content: >-
      public List<MemberWrapper> GetAllNonIgnoreFields<T>(List<RunTimeAttributeMap> runTimeAttributes, T instance)
          where T : class
    parameters:
    - id: runTimeAttributes
      type: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
    - id: instance
      type: '{T}'
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetAllNonIgnoreFields(Of T As Class)(runTimeAttributes As List(Of RunTimeAttributeMap), instance As T) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields*
  nameWithType.vb: ObjectToSql.GetAllNonIgnoreFields(Of T)(List(Of RunTimeAttributeMap), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(Of T)(System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap), T)
  name.vb: GetAllNonIgnoreFields(Of T)(List(Of RunTimeAttributeMap), T)
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(System.Type,System.Boolean)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(System.Type,System.Boolean)
  id: GetAllNonIgnoreFields(System.Type,System.Boolean)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: GetAllNonIgnoreFields(Type, Boolean)
  nameWithType: ObjectToSql.GetAllNonIgnoreFields(Type, Boolean)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: GetAllNonIgnoreFields
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 919
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nGets all non ignore fields.\n"
  example: []
  syntax:
    content: public List<MemberWrapper> GetAllNonIgnoreFields(Type type, bool includeNonPublicAccessor)
    parameters:
    - id: type
      type: System.Type
    - id: includeNonPublicAccessor
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: List&lt;MemberWrapper>.
    content.vb: Public Function GetAllNonIgnoreFields(type As Type, includeNonPublicAccessor As Boolean) As List(Of MemberWrapper)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper,System.Object,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper,System.Object,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper,System.Object,System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: ConvertToDatabaseValue(MemberWrapper, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: ObjectToSql.ConvertToDatabaseValue(MemberWrapper, Object, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper, System.Object, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: ConvertToDatabaseValue
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 936
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nConverts to database value.\n"
  example: []
  syntax:
    content: public object ConvertToDatabaseValue(MemberWrapper member, object value, Func<object, string> XmlSerializer, Func<object, string> JsonSerializer, Func<object, string> CsvSerializer)
    parameters:
    - id: member
      type: DotNetHelper.FastMember.Extension.Models.MemberWrapper
      description: The member.
    - id: value
      type: System.Object
      description: The value.
    - id: XmlSerializer
      type: System.Func{System.Object,System.String}
    - id: JsonSerializer
      type: System.Func{System.Object,System.String}
    - id: CsvSerializer
      type: System.Func{System.Object,System.String}
    return:
      type: System.Object
      description: System.Object.
    content.vb: Public Function ConvertToDatabaseValue(member As MemberWrapper, value As Object, XmlSerializer As Func(Of Object, String), JsonSerializer As Func(Of Object, String), CsvSerializer As Func(Of Object, String)) As Object
  overload: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue*
  nameWithType.vb: ObjectToSql.ConvertToDatabaseValue(MemberWrapper, Object, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(DotNetHelper.FastMember.Extension.Models.MemberWrapper, System.Object, System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: ConvertToDatabaseValue(MemberWrapper, Object, Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(System.Object)
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(System.Object)
  id: ConvertToDatabaseValue(System.Object)
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: ConvertToDatabaseValue(Object)
  nameWithType: ObjectToSql.ConvertToDatabaseValue(Object)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue(System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: ConvertToDatabaseValue
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 975
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nConverts to database value.\n"
  example: []
  syntax:
    content: public object ConvertToDatabaseValue(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value.
    return:
      type: System.Object
      description: System.Object.
    content.vb: Public Function ConvertToDatabaseValue(value As Object) As Object
  overload: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList``1(``0,System.Func{System.String,System.Object,System.Data.Common.DbParameter},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList``1(``0,System.Func{System.String,System.Object,System.Data.Common.DbParameter},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  id: BuildDbParameterList``1(``0,System.Func{System.String,System.Object,System.Data.Common.DbParameter},System.Func{System.Object,System.String},System.Func{System.Object,System.String},System.Func{System.Object,System.String})
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildDbParameterList<T>(T, Func<String, Object, DbParameter>, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  nameWithType: ObjectToSql.BuildDbParameterList<T>(T, Func<String, Object, DbParameter>, Func<Object, String>, Func<Object, String>, Func<Object, String>)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList<T>(T, System.Func<System.String, System.Object, System.Data.Common.DbParameter>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>, System.Func<System.Object, System.String>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildDbParameterList
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 996
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nBuilds the SQL parameter list.\n"
  example: []
  syntax:
    content: >-
      public List<DbParameter> BuildDbParameterList<T>(T instance, Func<string, object, DbParameter> GetNewParameter, Func<object, string> XmlSerializer, Func<object, string> JsonSerializer, Func<object, string> CsvSerializer)
          where T : class
    parameters:
    - id: instance
      type: '{T}'
    - id: GetNewParameter
      type: System.Func{System.String,System.Object,System.Data.Common.DbParameter}
    - id: XmlSerializer
      type: System.Func{System.Object,System.String}
    - id: JsonSerializer
      type: System.Func{System.Object,System.String}
    - id: CsvSerializer
      type: System.Func{System.Object,System.String}
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: List&lt;DbParameter>.
    content.vb: Public Function BuildDbParameterList(Of T As Class)(instance As T, GetNewParameter As Func(Of String, Object, DbParameter), XmlSerializer As Func(Of Object, String), JsonSerializer As Func(Of Object, String), CsvSerializer As Func(Of Object, String)) As List(Of DbParameter)
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList*
  nameWithType.vb: ObjectToSql.BuildDbParameterList(Of T)(T, Func(Of String, Object, DbParameter), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList(Of T)(T, System.Func(Of System.String, System.Object, System.Data.Common.DbParameter), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String), System.Func(Of System.Object, System.String))
  name.vb: BuildDbParameterList(Of T)(T, Func(Of String, Object, DbParameter), Func(Of Object, String), Func(Of Object, String), Func(Of Object, String))
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause(System.Text.StringBuilder,System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper})
  commentId: M:DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause(System.Text.StringBuilder,System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper})
  id: BuildWhereClause(System.Text.StringBuilder,System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper})
  parent: DotNetHelper.ObjectToSql.ObjectToSql
  langs:
  - csharp
  - vb
  name: BuildWhereClause(StringBuilder, List<MemberWrapper>)
  nameWithType: ObjectToSql.BuildWhereClause(StringBuilder, List<MemberWrapper>)
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause(System.Text.StringBuilder, System.Collections.Generic.List<DotNetHelper.FastMember.Extension.Models.MemberWrapper>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper.ObjectToSql/ObjectToSql.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper.ObjectToSql.git
    id: BuildWhereClause
    path: ../src/DotNetHelper.ObjectToSql/ObjectToSql.cs
    startLine: 1032
  assemblies:
  - DotNetHelper.ObjectToSql
  namespace: DotNetHelper.ObjectToSql
  summary: "\nBuilds the where clause.\n"
  example: []
  syntax:
    content: public void BuildWhereClause(StringBuilder sqlBuilder, List<MemberWrapper> keyFields)
    parameters:
    - id: sqlBuilder
      type: System.Text.StringBuilder
      description: The SQL builder.
    - id: keyFields
      type: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
      description: The key fields.
    content.vb: Public Sub BuildWhereClause(sqlBuilder As StringBuilder, keyFields As List(Of MemberWrapper))
  overload: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause*
  nameWithType.vb: ObjectToSql.BuildWhereClause(StringBuilder, List(Of MemberWrapper))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause(System.Text.StringBuilder, System.Collections.Generic.List(Of DotNetHelper.FastMember.Extension.Models.MemberWrapper))
  name.vb: BuildWhereClause(StringBuilder, List(Of MemberWrapper))
references:
- uid: DotNetHelper.ObjectToSql
  commentId: N:DotNetHelper.ObjectToSql
  name: DotNetHelper.ObjectToSql
  nameWithType: DotNetHelper.ObjectToSql
  fullName: DotNetHelper.ObjectToSql
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
  name: IncludeNonPublicAccessor
  nameWithType: ObjectToSql.IncludeNonPublicAccessor
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.IncludeNonPublicAccessor
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
  name: DatabaseType
  nameWithType: ObjectToSql.DatabaseType
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.DatabaseType
- uid: DotNetHelper.ObjectToSql.Enum.DataBaseType
  commentId: T:DotNetHelper.ObjectToSql.Enum.DataBaseType
  parent: DotNetHelper.ObjectToSql.Enum
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper.ObjectToSql.Enum.DataBaseType
- uid: DotNetHelper.ObjectToSql.Enum
  commentId: N:DotNetHelper.ObjectToSql.Enum
  name: DotNetHelper.ObjectToSql.Enum
  nameWithType: DotNetHelper.ObjectToSql.Enum
  fullName: DotNetHelper.ObjectToSql.Enum
- uid: DotNetHelper.ObjectToSql.ObjectToSql.#ctor*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.#ctor
  name: ObjectToSql
  nameWithType: ObjectToSql.ObjectToSql
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ObjectToSql
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery
  name: BuildQuery
  nameWithType: ObjectToSql.BuildQuery
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQuery
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper.ObjectToSql.Enum.ActionType
  commentId: T:DotNetHelper.ObjectToSql.Enum.ActionType
  parent: DotNetHelper.ObjectToSql.Enum
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper.ObjectToSql.Enum.ActionType
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[]
  isExternal: true
  name: Expression<Func<T, Object>>[]
  nameWithType: Expression<Func<T, Object>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>[]
  nameWithType.vb: Expression(Of Func(Of T, Object))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))()
  name.vb: Expression(Of Func(Of T, Object))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
  commentId: T:System.Collections.Generic.List{DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<RunTimeAttributeMap>
  nameWithType: List<RunTimeAttributeMap>
  fullName: System.Collections.Generic.List<DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap>
  nameWithType.vb: List(Of RunTimeAttributeMap)
  fullName.vb: System.Collections.Generic.List(Of DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap)
  name.vb: List(Of RunTimeAttributeMap)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap
    name: RunTimeAttributeMap
    nameWithType: RunTimeAttributeMap
    fullName: DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap
    name: RunTimeAttributeMap
    nameWithType: RunTimeAttributeMap
    fullName: DotNetHelper.ObjectToSql.Model.RunTimeAttributeMap
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs
  name: BuildQueryWithOutputs
  nameWithType: ObjectToSql.BuildQueryWithOutputs
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildQueryWithOutputs
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields
  name: GetNonKeyFields
  nameWithType: ObjectToSql.GetNonKeyFields
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonKeyFields
- uid: System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
  commentId: T:System.Collections.Generic.List{DotNetHelper.FastMember.Extension.Models.MemberWrapper}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MemberWrapper>
  nameWithType: List<MemberWrapper>
  fullName: System.Collections.Generic.List<DotNetHelper.FastMember.Extension.Models.MemberWrapper>
  nameWithType.vb: List(Of MemberWrapper)
  fullName.vb: System.Collections.Generic.List(Of DotNetHelper.FastMember.Extension.Models.MemberWrapper)
  name.vb: List(Of MemberWrapper)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DotNetHelper.FastMember.Extension.Models.MemberWrapper
    name: MemberWrapper
    nameWithType: MemberWrapper
    fullName: DotNetHelper.FastMember.Extension.Models.MemberWrapper
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DotNetHelper.FastMember.Extension.Models.MemberWrapper
    name: MemberWrapper
    nameWithType: MemberWrapper
    fullName: DotNetHelper.FastMember.Extension.Models.MemberWrapper
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields
  name: GetKeyFields
  nameWithType: ObjectToSql.GetKeyFields
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetKeyFields
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields
  name: GetNonIdentityFields
  nameWithType: ObjectToSql.GetNonIdentityFields
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetNonIdentityFields
- uid: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields
  name: GetAllNonIgnoreFields
  nameWithType: ObjectToSql.GetAllNonIgnoreFields
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.GetAllNonIgnoreFields
- uid: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue
  name: ConvertToDatabaseValue
  nameWithType: ObjectToSql.ConvertToDatabaseValue
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.ConvertToDatabaseValue
- uid: DotNetHelper.FastMember.Extension.Models.MemberWrapper
  commentId: T:DotNetHelper.FastMember.Extension.Models.MemberWrapper
  parent: DotNetHelper.FastMember.Extension.Models
  isExternal: true
  name: MemberWrapper
  nameWithType: MemberWrapper
  fullName: DotNetHelper.FastMember.Extension.Models.MemberWrapper
- uid: System.Func{System.Object,System.String}
  commentId: T:System.Func{System.Object,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Object, String>
  nameWithType: Func<Object, String>
  fullName: System.Func<System.Object, System.String>
  nameWithType.vb: Func(Of Object, String)
  fullName.vb: System.Func(Of System.Object, System.String)
  name.vb: Func(Of Object, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.FastMember.Extension.Models
  commentId: N:DotNetHelper.FastMember.Extension.Models
  isExternal: true
  name: DotNetHelper.FastMember.Extension.Models
  nameWithType: DotNetHelper.FastMember.Extension.Models
  fullName: DotNetHelper.FastMember.Extension.Models
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList
  name: BuildDbParameterList
  nameWithType: ObjectToSql.BuildDbParameterList
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildDbParameterList
- uid: System.Func{System.String,System.Object,System.Data.Common.DbParameter}
  commentId: T:System.Func{System.String,System.Object,System.Data.Common.DbParameter}
  parent: System
  definition: System.Func`3
  name: Func<String, Object, DbParameter>
  nameWithType: Func<String, Object, DbParameter>
  fullName: System.Func<System.String, System.Object, System.Data.Common.DbParameter>
  nameWithType.vb: Func(Of String, Object, DbParameter)
  fullName.vb: System.Func(Of System.String, System.Object, System.Data.Common.DbParameter)
  name.vb: Func(Of String, Object, DbParameter)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause*
  commentId: Overload:DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause
  name: BuildWhereClause
  nameWithType: ObjectToSql.BuildWhereClause
  fullName: DotNetHelper.ObjectToSql.ObjectToSql.BuildWhereClause
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
